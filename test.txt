echo "
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: klusterlets.operator.open-cluster-management.io
spec:
  group: operator.open-cluster-management.io
  names:
    kind: Klusterlet
    listKind: KlusterletList
    plural: klusterlets
    singular: klusterlet
  scope: Cluster
  preserveUnknownFields: false
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: Klusterlet represents controllers on the managed cluster. When
          configured, the Klusterlet requires a secret named of bootstrap-hub-kubeconfig
          in the same namespace to allow API requests to the hub for the registration
          protocol.
        type: object
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Spec represents the desired deployment configuration of Klusterlet
              agent.
            type: object
            properties:
              clusterName:
                description: ClusterName is the name of the managed cluster to be
                  created on hub. The Klusterlet agent generates a random name if
                  it is not set, or discovers the appropriate cluster name on OpenShift.
                type: string
              externalServerURLs:
                description: ExternalServerURLs represents the a list of apiserver
                  urls and ca bundles that is accessible externally If it is set empty,
                  managed cluster has no externally accessible url that hub cluster
                  can visit.
                type: array
                items:
                  description: ServerURL represents the apiserver url and ca bundle
                    that is accessible externally
                  type: object
                  properties:
                    caBundle:
                      description: CABundle is the ca bundle to connect to apiserver
                        of the managed cluster. System certs are used if it is not
                        set.
                      type: string
                      format: byte
                    url:
                      description: URL is the url of apiserver endpoint of the managed
                        cluster.
                      type: string
              namespace:
                description: Namespace is the namespace to deploy the agent. The namespace
                  must have a prefix of "open-cluster-management-", and if it is not
                  set, the namespace of "open-cluster-management-agent" is used to
                  deploy agent.
                type: string
              nodePlacement:
                description: NodePlacement enables explicit control over the scheduling
                  of the deployed pods.
                type: object
                properties:
                  nodeSelector:
                    description: NodeSelector defines which Nodes the Pods are scheduled
                      on. The default is an empty list.
                    type: object
                    additionalProperties:
                      type: string
                  tolerations:
                    description: Tolerations is attached by pods to tolerate any taint
                      that matches the triple <key,value,effect> using the matching
                      operator <operator>. The default is an empty list.
                    type: array
                    items:
                      description: The pod this Toleration is attached to tolerates
                        any taint that matches the triple <key,value,effect> using
                        the matching operator <operator>.
                      type: object
                      properties:
                        effect:
                          description: Effect indicates the taint effect to match.
                            Empty means match all taint effects. When specified, allowed
                            values are NoSchedule, PreferNoSchedule and NoExecute.
                          type: string
                        key:
                          description: Key is the taint key that the toleration applies
                            to. Empty means match all taint keys. If the key is empty,
                            operator must be Exists; this combination means to match
                            all values and all keys.
                          type: string
                        operator:
                          description: Operator represents a key's relationship to
                            the value. Valid operators are Exists and Equal. Defaults
                            to Equal. Exists is equivalent to wildcard for value,
                            so that a pod can tolerate all taints of a particular
                            category.
                          type: string
                        tolerationSeconds:
                          description: TolerationSeconds represents the period of
                            time the toleration (which must be of effect NoExecute,
                            otherwise this field is ignored) tolerates the taint.
                            By default, it is not set, which means tolerate the taint
                            forever (do not evict). Zero and negative values will
                            be treated as 0 (evict immediately) by the system.
                          type: integer
                          format: int64
                        value:
                          description: Value is the taint value the toleration matches
                            to. If the operator is Exists, the value should be empty,
                            otherwise just a regular string.
                          type: string
              registrationImagePullSpec:
                description: RegistrationImagePullSpec represents the desired image
                  configuration of registration agent.
                type: string
              workImagePullSpec:
                description: WorkImagePullSpec represents the desired image configuration
                  of work agent.
                type: string
          status:
            description: Status represents the current status of Klusterlet agent.
            type: object
            properties:
              conditions:
                description: 'Conditions contain the different condition statuses
                  for this Klusterlet. Valid condition types are: Applied: Components
                  have been applied in the managed cluster. Available: Components
                  in the managed cluster are available and ready to serve. Progressing:
                  Components in the managed cluster are in a transitioning state.
                  Degraded: Components in the managed cluster do not match the desired
                  configuration and only provide degraded service.'
                type: array
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    type FooStatus struct{     // Represents the observations of a
                    foo's current state.     // Known .status.conditions.type are:
                    \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type
                    \    // +patchStrategy=merge     // +listType=map     // +listMapKey=type
                    \    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`
                    \n     // other fields }"
                  type: object
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      type: string
                      format: date-time
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      type: string
                      maxLength: 32768
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      type: integer
                      format: int64
                      minimum: 0
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      type: string
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      type: string
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      type: string
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
              generations:
                description: Generations are used to determine when an item needs
                  to be reconciled or has changed in a way that needs a reaction.
                type: array
                items:
                  description: GenerationStatus keeps track of the generation for
                    a given resource so that decisions about forced updates can be
                    made. The definition matches the GenerationStatus defined in github.com/openshift/api/v1
                  type: object
                  properties:
                    group:
                      description: group is the group of the resource that you're
                        tracking
                      type: string
                    lastGeneration:
                      description: lastGeneration is the last generation of the resource
                        that controller applies
                      type: integer
                      format: int64
                    name:
                      description: name is the name of the resource that you're tracking
                      type: string
                    namespace:
                      description: namespace is where the resource that you're tracking
                        is
                      type: string
                    resource:
                      description: resource is the resource type of the resource that
                        you're tracking
                      type: string
                    version:
                      description: version is the version of the resource that you're
                        tracking
                      type: string
              observedGeneration:
                description: ObservedGeneration is the last generation change you've
                  dealt with
                type: integer
                format: int64
              relatedResources:
                description: RelatedResources are used to track the resources that
                  are related to this Klusterlet.
                type: array
                items:
                  description: RelatedResourceMeta represents the resource that is
                    managed by an operator
                  type: object
                  properties:
                    group:
                      description: group is the group of the resource that you're
                        tracking
                      type: string
                    name:
                      description: name is the name of the resource that you're tracking
                      type: string
                    namespace:
                      description: namespace is where the thing you're tracking is
                      type: string
                    resource:
                      description: resource is the resource type of the resource that
                        you're tracking
                      type: string
                    version:
                      description: version is the version of the thing you're tracking
                      type: string
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
" | base64 -d | kubectl create -f - || test $? -eq 0 && sleep 2 && echo "
---
apiVersion: v1
kind: Namespace
metadata:
  annotations:
    workload.openshift.io/allowed: "management"
  name: "open-cluster-management-agent"

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: klusterlet
  namespace: "open-cluster-management-agent"

---
apiVersion: v1
kind: Secret
metadata:
  name: "bootstrap-hub-kubeconfig"
  namespace: "open-cluster-management-agent"
type: Opaque
data:
  kubeconfig: "YXBpVmVyc2lvbjogdjEKY2x1c3RlcnM6Ci0gY2x1c3RlcjoKICAgIGNlcnRpZmljYXRlLWF1dGhvcml0eS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VSTmFrTkRRV2h4WjBGM1NVSkJaMGxKUkRkdGRsQk9VWFV3VVd0M1JGRlpTa3R2V2tsb2RtTk9RVkZGVEVKUlFYZE9la1ZUVFVKQlIwRXhWVVVLUTNoTlNtSXpRbXhpYms1dllWZGFNRTFUUlhkSWQxbEVWbEZSUkVWNGFISmtWMHBzVEZkR2QyRllUbXhqYmxwc1kya3hjMWxwTVhwaFYyUjFXbGhKZHdwSWFHTk9UV3BKZDAxNlFYbE5WRmw0VFZSUk1WZG9ZMDVOZWtsM1RXcEpORTFVV1hoTlZGRXhWMnBCTTAxU1NYZEZRVmxFVmxGUlRFVjNiSFpqUjFaMUNtTXlhSEJhYmxGNFNWUkJaa0puVGxaQ1FVMVVSMGQwTVZsdFZYUlpXRUp3WXpKV2VXUnRWbmxNVjNocFRGaE9jRm95Tld4amFrTkRRVk5KZDBSUldVb0tTMjlhU1doMlkwNUJVVVZDUWxGQlJHZG5SVkJCUkVORFFWRnZRMmRuUlVKQlRXcEdUazVwTmxCemNXbDRRamszVTFobmFtZHBTSHBTY21FM05qSnNRZ3A1ZEdSRFRVTlFSbGMyZEhOSlMxVnNaakZMUm5Nd1ZUUk5VbkZvZFU1RmRtSjVRM1UzU1VWVGNtZFFVbFpaUzFsU00wczNUMjVoVXl0b05tdFdLMk5IQ2xWbmFVVkpXa1pHY1U1WFZIaG5RaXMzVEhWMmFtdHZhV052YlVaQk9VMUVVV3RIVlhaMFVVZGlORVpIUkdsc1YyUnVjelJSZEZSUldrWTFibWRQZEhRS01GcFphRUZEWW5kSlJXbERObXhNV1dVMGNGZHJRVXRsU2tsUldsQTFlbkY1U0VFMFMxVmxhWGQxY0VoeWFVTjRiRFpOWldGd2NsaGhiamxDUVhsdmRncHFXSGhWYVRseFQwOXlTR3BVTldsUFozWlNiVFJWV1ZObVNqSkJSMHB1ZWtwb2J5dFllSGwxVkZWTWFHdE5ZemxUZG5velMwY3ZWM1Z5ZUdWaVRYazFDblYzSzBGWmVFcGFkMk15VldKa1JIaGxNbXR1VEV4NlNUZE1iek5CU0M5Q01tOVNhRWRyVTJrdmFuWlNiWGhKTTBodlFXVTNVVVZEUVhkRlFVRmhUa01LVFVWQmQwUm5XVVJXVWpCUVFWRklMMEpCVVVSQlowdHJUVUU0UjBFeFZXUkZkMFZDTDNkUlJrMUJUVUpCWmpoM1NGRlpSRlpTTUU5Q1FsbEZSa2RVZGdwdlZtaHhhMDFqTUdKbUszSnNRemhEV1doRVdHcFlSblZOUVRCSFExTnhSMU5KWWpORVVVVkNRM2RWUVVFMFNVSkJVVUpQTkZBelUwSTBORFpWUm5sSENubHdhRVUyV0dONlFURlhNekZUU0c1WE9UUTFMMDFVVm5oalQzazFSVTh2Wnk5dlRVcHBRVmhEY0ZsWE5tTnlUSFozWlZFNGVIaHhXSFpRTlRaa1dYVUtVVTlyVlhSRmNDOXlVM1UzTVRoalpGWjNhRlp3UWpJdlYzWjBVWE5tWW1neVRHNVJUMGxpV0ZaR1psUkdhVWxzYWpsYVRWSnFkRkJQVFVJd2QxcDVkUXBMTUd0clZFRlhXbTlvUWs0NGRqSTVUVnA1ZW5vNVdHSm9hVlJtVWt4WWRFaE9NM1ozWjBoS1pGVnJaR1puTHpWbFJHNW5aRFJITTNGa1duWndSbGxqQ2xRdlZsWmljRUV3V2pKWVJXcGxabVpPVmxkNlltRnRjMWxsY1RJdlRHUmhjRTE1V0U0MlpHdFVOV1ZSWlhablN6aFJSMXBpVmpSR2JEaEViRVJPVVdnS1lWTlNUVWRzY1dwV09UTkVWSEVyTmpST09YcDFNazVsYVZsc1prZHNRMU15Y2xGbFVVUmlhVnBMZGtWaVJEQXhUVWswTVhGaVUyTmhSbmxQZFRJMldncDZNRGh0YkZWWFdnb3RMUzB0TFVWT1JDQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENpMHRMUzB0UWtWSFNVNGdRMFZTVkVsR1NVTkJWRVV0TFMwdExRcE5TVWxFVVVSRFEwRnBhV2RCZDBsQ1FXZEpTV0o0TUVJMWExaHZUM293ZDBSUldVcExiMXBKYUhaalRrRlJSVXhDVVVGM1VHcEZVMDFDUVVkQk1WVkZDa040VFVwaU0wSnNZbTVPYjJGWFdqQk5VMmQzU21kWlJGWlJVVVJGZURseVpGZEtiRXhYUm5kaFdFNXNZMjVhYkdOcE1YTmlNazVvWWtkb2RtTXpVWFFLWXpKc2JtSnRWbmxOUWpSWVJGUkplVTFFVFhkTmFrVXlUVlJGTUU1V2IxaEVWRTE1VFVSSmVVOUVSVEpOVkVVd1RsWnZkMUJxUlZOTlFrRkhRVEZWUlFwRGVFMUtZak5DYkdKdVRtOWhWMW93VFZObmQwcG5XVVJXVVZGRVJYZzVjbVJYU214TVYwWjNZVmhPYkdOdVdteGphVEZ6WWpKT2FHSkhhSFpqTTFGMENtTXliRzVpYlZaNVRVbEpRa2xxUVU1Q1oydHhhR3RwUnpsM01FSkJVVVZHUVVGUFEwRlJPRUZOU1VsQ1EyZExRMEZSUlVFd1dXcGljRGRQTkVGaVRub0tPRWxuVVhJek1ITlNhVlJLWjBsTWRHMDFWR2xwY3l0Q056WjJTRmxtTVRSdE4wSk1PRGhETkVJNGNGUXplSGRLWm05bk1EVmxWV1JpUTBkVWFVTkxNUXB4UTNneFJFOUdabVUyYjJkT2VGQnRhRk5hUkZOaUx6Sk9UbWh3UXpncmNGSlJWMkpVYkVKYVQwUktSVlJMZEVvdmVXTklaVkZVUVdGbVZ5OXdNVmhpQ20wMlZEVllRMnBJTDBSR2IxUTBOamhyUVhScFdXTTNhaTluVDAxa1pFcDBOVlZDUjAxUmFraDRhbmRPZDNkaGFEY3diMWhDVFRBMU5EQXJWMjlWUTJNS1pGSnFRall5YzNORGF6WjFVa3B5YWtOVmNIRnlSSGQzZW5OT09HVktlVnBwV25GRGVITTJOMHMxTlZKU2F6Z3pWVzlCWVd0clpYTkdPRTF4ZFZCcU9Bb3pZbmhrYkRRMWRFTnZVVFEzZEZkc09XbGhNWFU1UmpVNVVIRXdSa1I0S3l0TEswWmpOMkUzUWpScGNHeElTWGt6VjNCSlRqZEJMMDlGTm1wSEt6UjJDa0Y0VWs5MGRuSTRUWGRKUkVGUlFVSnZNRWwzVVVSQlQwSm5UbFpJVVRoQ1FXWTRSVUpCVFVOQmNWRjNSSGRaUkZaU01GUkJVVWd2UWtGVmQwRjNSVUlLTDNwQlpFSm5UbFpJVVRSRlJtZFJWWEZMTjA1VkwzQm9WMDlWYzJkc1JXWlJWbUptZGtVemFYbDRhM2RFVVZsS1MyOWFTV2gyWTA1QlVVVk1RbEZCUkFwblowVkNRVVJsZDNKSlZWUmthVWRIVjJKM1ZpOWxaa1ZDZGl0alJuUXZkelE1UWs1c1VHYzRUbmxuTjNoNE5VUmFUazUwVGt4dlUzRlpiV2xqUzIxNENuSkRlR3hxZUVGM05XWk1Remh6ZFc5dkwzcHBUbTVKZVZkR2RFeGpSMU5SUkVJcmJtVmFRblU0WkRkNlZHRlRhRTlqYldsMmJXRm5XbGRqV1N0YWVFd0taMGx0WjFaYVVEZElUMHhKVW5aMFIyUjBLMW80Y0c1a1JHd3lXbFZoUjBoQ2JHZ3hUakJsUmpBNWFucDBaelZTT1dkSFZpdHFkREYyVEM4MVlXNUhRUXBNWVZBdlN5dG9ZM1JSZUZaalpETjRRazFaYkN0RVVsVmFTWEpvU201T1NqUkhiV2RqY1hKcU4yb3pOVEUxYTFoTlIyeGxXbVJpYzFCUVdFNXhlVmt5Q2pZMVowSXJWM0pVVG5GMU5EQXJNbmR4T0VWM1IwSmtOeXMwYTNCak5EQmpaMHMyUkhSMFFsbFdPR3hPWjBONFVWVTBlbmxLUnpoa2JrOWlLMGhtUkhRS1ZYWklMek5UVWxSdGNEbEhiemhpTkUwdk5XTnhLMk4xVVVkUlBRb3RMUzB0TFVWT1JDQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENpMHRMUzB0UWtWSFNVNGdRMFZTVkVsR1NVTkJWRVV0TFMwdExRcE5TVWxFVkVSRFEwRnFVMmRCZDBsQ1FXZEpTV1k0TDNsbWJXZE1XakZOZDBSUldVcExiMXBKYUhaalRrRlJSVXhDVVVGM1VrUkZVMDFDUVVkQk1WVkZDa040VFVwaU0wSnNZbTVPYjJGWFdqQk5VelIzVEVGWlJGWlJVVVJGZVZaeVpGZEtiRXhYUm5kaFdFNXNZMjVhYkdOcE1YcGFXRW95WVZkT2JFeFhOV3dLWkVoa2RtTnRjM1JqTW14dVltMVdlVTFDTkZoRVZFbDVUVVJOZDAxcVJUSk5WRVV3VGxadldFUlVUWGxOUkVsNVQwUkZNazFVUlRCT1ZtOTNVa1JGVXdwTlFrRkhRVEZWUlVONFRVcGlNMEpzWW01T2IyRlhXakJOVXpSM1RFRlpSRlpSVVVSRmVWWnlaRmRLYkV4WFJuZGhXRTVzWTI1YWJHTnBNWHBhV0VveUNtRlhUbXhNVnpWc1pFaGtkbU50YzNSak1teHVZbTFXZVUxSlNVSkpha0ZPUW1kcmNXaHJhVWM1ZHpCQ1FWRkZSa0ZCVDBOQlVUaEJUVWxKUWtOblMwTUtRVkZGUVhVelZFb3pOR1F5YUN0T2FqZGxlWHBCVkc5cWNXSkJiSFpuY21SWGNWQmhjVmxIYUVabFRHZEZNRXRZWm04clJITTFhVGhFZEc5MldERkRSUW8yTVVwRldIRk1aemxXYVRjMVZYSjRVVWhCYkVwWUwwYzFTelEwVFhCcmRUVlNlRFpuTnpsWFlrOXZPRU5sZUdwdFZERnhZbFZzYlZaYVNFcDBaa2RsQ2xVclJYSXhRazVOYUcwelpYbDJjRmRIZUdvMkwwVkRlV0p6Y0Vsc1YxUm9kRzlSWlV0S1NFOXlNRFpOVkVkVFowcDZNMEphY1hjd1EwZFNlRVZpUkhNS09VeERMME5CYUhOMVlVMHpOVk5rTjNwc1Jrd3dRakJYZVVOeU5tdEhPREp4VjBaQlZuWkljMU5xTVZGRE9EUnNWa1oxSzBGSlVtSjVaRVE1TUhCVVFncExhMUZ3UlVZM1EyRktRM2hUZDA1Rk56QXdaR1ZhTDFsRFZXaDNaa1JUTTNRMlpXWlRVRzlEVVN0c1RuTldTelIzU1c5TE1XSndOa3haV2taeksxZFNDa2xPYjFSVmMzQnFhamxOTnpGbllXOHdlbGRNY2xWUFZVRjNTVVJCVVVGQ2J6QkpkMUZFUVU5Q1owNVdTRkU0UWtGbU9FVkNRVTFEUVhGUmQwUjNXVVFLVmxJd1ZFRlJTQzlDUVZWM1FYZEZRaTk2UVdSQ1owNVdTRkUwUlVablVWVTVSSGQ2U1ZFM05tczBiSEJaVTFaeVJUaDRWR1JQYTJGRFFtTjNSRkZaU2dwTGIxcEphSFpqVGtGUlJVeENVVUZFWjJkRlFrRkxSMlF3Vlc1SFkxZEtaMkZQVG1ZcmFUWkpjRGhXYUhnMlFWZFdObEZVWjFwdlVVTlJUM0ExTjFVeENqUjBaMFJXYW5KelFtbENTR2d5YUcxSGFtRXJkVlp0TkRCb2VEQkNXa0k0Vm1aTGFEVTRkWG8zSzAxSmEwNXJhbFJQTVVScllrVjJhM0U1UjJwSVVGb0tiQzlLU25WcFVsZFJjWEFyTVhoRFVHbG5PUzlaU1VJNWREWmphVTF0YjNjeU1YVnZVbkY0VGt4aFRYSkxlbGRTVkdaWFVEZFpOakEzWlc5SVltZDBNZ3BqUTFGaVFUTnRZMUU0Um1RNVIxYzNiMWhEVHpKaWFHaENiemx5Y2xaYU5YWnRaMk56VDJjeFNIQldNbFkwVUdacFVEYzNXSEZXZUhoWmIyOU1iemN4Q2k5d01EUkVVMlphYzJWQmJsVjNaR1JEYm1VMFdEQXpWbnBGTVc1VmEwbFlRa1ZFWW1kUGRUQTJkeXRKTm14d2FuSlBlRVZQYlRjeVdERmtWVWd4WlRBS1FYZERORGMwVFVkeGVtUlVhek40ZW5kaE55OVRURUZ4WVdOdlpHbDBUbmx6WVVKYWRXVjFURWhqU1QwS0xTMHRMUzFGVGtRZ1EwVlNWRWxHU1VOQlZFVXRMUzB0TFFvdExTMHRMVUpGUjBsT0lFTkZVbFJKUmtsRFFWUkZMUzB0TFMwS1RVbEpSR3g2UTBOQmJpdG5RWGRKUWtGblNVbEtNV3BQTVVsVFYybDFhM2RFVVZsS1MyOWFTV2gyWTA1QlVVVk1RbEZCZDFkVVJsaE5SbFZIUVRGVlJRcEJkM2hQWWpOQ2JHSnVUbTloVjFvd1RGZDBNVmx0VlhSWldFSndZekpXZVdSdFZubE1WemwzV2xoS2FHUkhPWGxZTW5oMldUSkdjMkZIT1hwa1F6RjVDbHBYVG5aa2JWWjVaVk14ZWxwWVNqSmhWelZ1VEZoT2NGb3lOV3hqYTBGNFRtcFJNazFxVFRSTlZGbDVUVUkwV0VSVVNYbE5SRTEzVFdwRk1rMXFTVEFLVFZadldFUlVUWGxOUkVsNVQwUkZNazFxU1RCTmJHOTNWMVJHV0UxR1ZVZEJNVlZGUVhkNFQySXpRbXhpYms1dllWZGFNRXhYZERGWmJWVjBXVmhDY0Fwak1sWjVaRzFXZVV4WE9YZGFXRXBvWkVjNWVWZ3llSFpaTWtaellVYzVlbVJETVhsYVYwNTJaRzFXZVdWVE1YcGFXRW95WVZjMWJreFlUbkJhTWpWc0NtTnJRWGhPYWxFeVRXcE5ORTFVV1hsTlNVbENTV3BCVGtKbmEzRm9hMmxIT1hjd1FrRlJSVVpCUVU5RFFWRTRRVTFKU1VKRFowdERRVkZGUVhJck5XOEtVRXBKYkVwaGIxUjZkM0YwZW5oT1pXNU1TMWxJU2pkR1dEZDFTakE0VDJJMFpYTnBOVUZsZVVKWmFsWlBiRXhtVTIwdlEwUllSMjgxYVZwNWFVd3pkZ3BUV2t3eGVqVkdlVzVIVFhaVFR5OUpNR0ZsVjFCMmNHZERNVFZNVVVsdlZVUjBTRXg1VjBvNVpEZ3JLMlJYYW5ac01TdEVSa0ppZFVsU0szTXhNblEzQ2pGNmEwOVhRVE5PUkdKSU1tSmtNakZIYXpCNFFUTnVVMlpWYTBZcmEwSXpWRTFLUW05dVRsTTFlWGhyWTBkaWEyNXlSbnBrVWsxemJHWm1ibWhEVVZFS1VVTnlWRXBpU2xFMk5XZG5jVkJ1U0hsWFIydHdXWE5DVWtseGVVUXpabXhXUjFwVWNHdzFTVnBoZG1oV1VEaHdXbXA2TUZNd1JFZzJOMU16U1VOeVl3cHJVRUYxS3pkWFdXVkpZVE5TVmtzMWNteDRTVWRxZHpRMU4wc3ZRVk5uTlRZNE5ERmhVRkJGZDBOM00zQk5ORGMxZFdWMVJEVm9jRFl6WTB4elVWUkVDa04wTkRWelJGQnFjRXhQWlhONVZFbEpVVWxFUVZGQlFtOHlUWGRaVkVGUFFtZE9Wa2hST0VKQlpqaEZRa0ZOUTBGeFVYZEVkMWxFVmxJd1ZFRlJTQzhLUWtGVmQwRjNSVUl2ZWtGa1FtZE9Wa2hSTkVWR1oxRlZObVJpV1ZCelp6SmFjVGt3VW01SlEyMHJPRXQyUm1sdlkxcG5kMGgzV1VSV1VqQnFRa0puZHdwR2IwRlZObVJpV1ZCelp6SmFjVGt3VW01SlEyMHJPRXQyUm1sdlkxcG5kMFJSV1VwTGIxcEphSFpqVGtGUlJVeENVVUZFWjJkRlFrRkhMMkZIYUdRNUNrdzRhMU5VYlV0bVlrSk9ka3M1Wm5Wc05GQmthaklyTld0UlZsSklOVVUxVjNGTmQyNTVWbWgyYTNCTlFsSnVURFpGTUVGdFJsVlJWQzl0TWtaUVJGTUtaMnBLWjFnNFJuaHZPRkpNYlhWVVFYVXpjMGQ1U213emRuUlBUMnBuVFNzM2RteEhTemxzVGpVeU9EbFRRbEZJYWxkU01UaFRRVWh3YlhJeVIyUnFPUXBPY25oV2VpdGhhM0ZZYjJkTmRYVjRaRGhoYmpoYWFHODBOVVEzTnpKbU16VnRUVTVaY1VGaGRHdHZlRE5ZWWxJd1VpOWthbXAzTWs1WGQwaFhaRkJ4Q25wb1lsTkNNamxoUTJsSmRXbFNZMHR1UkRSaFdYVmlNMUZSYzNSTVMzWkRkMlJLYzNaeFRVUk1RMmRSWXpJek9WaHNOR0UyZVVaeFltVlJZbGRXVVc0S1ptOHJSVXBTWWlzMFVqRkpSRmRRVjBSUFJtVndjMEphTTBJdmEyaG5PRzlZY25jMU4xaFRWVmRTV2pVdlpDODVNbUpSYWtwWk56ZGlWRmgxZVZsWGJRbzFWR1ptV2tWNWNUZHRibXRpUzJzOUNpMHRMUzB0UlU1RUlFTkZVbFJKUmtsRFFWUkZMUzB0TFMwS0xTMHRMUzFDUlVkSlRpQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENrMUpTVVpzVkVORFFrZ3laMEYzU1VKQlowbFRRU3R2UlRCYVIzRjVUVXN5YW5nMGJWRlZSRXc1VVhjd1RVRXdSME5UY1VkVFNXSXpSRkZGUWtOM1ZVRUtUVVJKZUVONlFVcENaMDVXUWtGWlZFRnNWbFJOVWxsM1JrRlpSRlpSVVV0RmR6Rk5XbGhSYm1ONVFrWmliVTU1WlZoQ01FMVJjM2REVVZsRVZsRlJSQXBGZDBwVFRYcEJaVVozTUhsTmFrRjZUVVJKZUU1VVVUUk5la3BoUm5jd2VVMXFRVEZOZWtWNFRsUlJORTE2Um1GTlJHdDRUbnBCTVVKblRsWkNRVTFVQ2t4dFJuZGhVelZxWWtoV2VtUkhWbmxNV0VaeVpVZFNia3h1Um5KbFIxSnVURzVPYUdKdFVtbGlNMmMwVG5wcmRXSXpRbXhpYmxKeldYazFhbUl5TUhjS1oyZEZhVTFCTUVkRFUzRkhVMGxpTTBSUlJVSkJVVlZCUVRSSlFrUjNRWGRuWjBWTFFXOUpRa0ZSUkUxVVVqRjJla2haTVU4dmFWSmpRM0JVUlRoWFJncHFWU3QwU0N0TFRFSlpkRFl2UkdSUU5VbFZjVFUyZEV0aVYzWkhRVUpoY0dKcGNIUlBTV2RHV0cxNmRWRkdSWEZVY21GQ2MweFljRVZzUmpoNmQzaExDa0pLTTBwYVZYUmFVRzV5VldWYVZUaGpkSEpOWXpaU1pWUnFWRzlxVGsxTWIwdExPVVl4Ym5veGRrTXlaR1Z5UTBZeFFsaDNkRmhIWVdWek1uSjVkREVLWkc1YU1YQjFVRzQxZGtSak5IQXJObVoyVTFKcmRGbzRUMVZPZG5VNVVtZDBUV1JSWTA1UGIyRnRiaXRJU201UFVGWk9ka2N4YUd0R1NtdExaVkJtT0Fvd1dXdDJNRWt5U0daQ2VGbGhiRFprYW5WbGNsRmhZbTgzY2sxbWJUVTNaekl3Y0hvNFkyMVRWRmxDY1ZaUFJGUlZkRFZtYlM5c2FXdElPR2Q2UldGbUNuaExhMnQ0Tm5JNVJtNDBlRFV3WjFGUk0zZzJRa051TnpscFVtMWhhWE5sWjFkd1lUSkxkbXBMTjA5RFpXRldhMm96YjNZeGNpc3hTams1VURoMlZGWUtRV2ROUWtGQlIycG5aMHRqVFVsSlEyMUVRVTlDWjA1V1NGRTRRa0ZtT0VWQ1FVMURRbUZCZDBoUldVUldVakJzUWtKWmQwWkJXVWxMZDFsQ1FsRlZTQXBCZDBWSFEwTnpSMEZSVlVaQ2QwMURUVUYzUjBFeFZXUkZkMFZDTDNkUlEwMUJRWGRJVVZsRVZsSXdUMEpDV1VWR1FWWnVZV05sYmtWWU0xRTJUbGxMQ2xKalNXWTFTa0ZIU21jMGJFMUNPRWRCTVZWa1NYZFJXVTFDWVVGR1FsRjFjM2hsTTFkR1lreHliRUZLVVU5WlpuSTFNa3hHVFV4SFRVWlZSME5EYzBjS1FWRlZSa0ozUlVKQ1JXdDNVbnBCYUVKblozSkNaMFZHUWxGamQwRlpXVlpoU0ZJd1kwUnZka3d6U1hwTWJUaDFZa2RXZFZrelNYVmlNMHB1VFVOSlJ3cERRM05IUVZGVlJrSjZRVU5vYUZwdlpFaFNkMDlwT0haamFrMTFZVk0xYzFwWE5XcGphVFYyWTIxamRrMUhkMGRCTVZWa1JWRlNiRTFIVDBOTlUyOTFDbGxZUW5kamVUVnFZa2hXZW1SSFZubE1XRVp5WlVkU2JreHVSbkpsUjFKdVRHNU9hR0p0VW1saU0yYzBUbnByZFdJelFteGlibEp6V1hrMWFtSXlNa01LVEcxR2QyRlROV3BpU0ZaNlpFZFdlVXhZUm5KbFIxSnVURzVHY21WSFVtNU1iazVvWW0xU2FXSXpaelJPZW10MVlqTkNiR0p1VW5OWmVUVnFZakl3ZHdwVVFWbEVWbEl3WjBKRlZYZFJla0ZKUW1kYWJtZFJkMEpCWjBWM1RuZFpURXQzV1VKQ1FVZERNM2hOUWtGUlJYZExSRUZ0UW1kbmNrSm5SVVpDVVdORENrRlNXV0ZoU0ZJd1kwUnZka3d5VG5kamVUVnpXbGhTZWxwWE5XcGpibXgzWkVNMWRtTnRZM2RuWjBWRlFtZHZja0puUlVWQlpGbzFRV2RSUTBKSlNERUtRa2xJZVVGUVFVRmtaMFJtY0ZZMmNtRkpTbEJJTW5sME4zSm9abFJxTldFMmN6SnBSWEZTY1Zodk5EZEZjMEZuVWtaM2NXTjNRVUZCV0RsTWFVbFNTd3BCUVVGRlFYZENTRTFGVlVOSlJFSlJaa0U1YUZWa2NYbHVWRFZqV0hJNWFXVTNabEpFUm5BMFFtWndMMFJpY0hVMGJFbHdUbGhqWTBGcFJVRndVekYwQ25oVGNIbEVVVWg1T0doNldGZEtlRGsyZEdkUmFWcGpPVzgwVm1VNEwybEZVQ3RyYlRkYWQwRmtaMEpIY0ZaWWNtUm1jVkpKUkVNeGIyOXNjRGxRVGprS1JWTjRRbVJNTnpsVFltbEdjUzlNT0dOUU5YUlNkMEZCUVZnNVRHbEpVMGxCUVVGRlFYZENTRTFGVlVOSlJtOVJiMFYwZVRaSlVqWmpjWFExWWt0WVlRcGpaRWw1YVROTVNHbG1aVTR3U25aeVUwMVBabEJ2V1daQmFVVkJjVGxKUjNOaWIwaGtNREl6V0V0cU9YcExkMEUyU1doVllrbHRVRGwzWlZCQlRXc3pDaXRpUWpGNWMwVjNSRkZaU2t0dldrbG9kbU5PUVZGRlRFSlJRVVJuWjBWQ1FVcDZSWG8xYjFkNWRXZG5ZWFZDSzFsdlEwYzRlREpoYlRKaGEwMTFUV2NLVDJWeWFEQnNiMDR2V1RoSVZVOXdlRUZZVmxRNGNUQkRNbEZ1VW5ORlNVZGFSR05pU0RBeE5XaEdNWEJWZDFWME9IYzJaRWRLUW1FMlRtWlpPRFJPZFFwRVJEWlJPR0pxVVhGRlF6SnJOWFEyYm10VmVsWk1RbmhrVDJsdFlsVllWMU5sU1hWdkwxWnRjM1JJZVhOUVZVaFdPRWgwYlVWck1FcDJMelYzYjI1aUNscE5PVEZyZEhCRk9YQXZPRlZEY0VWcVNsRjRSbE5aUlZoM1lteE1TSFZ3UlZsVU1WTmhhVnBoVVZaNWNTdEdhR2R0ZEdab05FTlhNWGRNV1ZoMlNEUUtWemhwYUc5MmExbE1ZbXhhVFVkVWNXWXdlVk5rU21SUVlucE9jbWt6TUhOQllUWm1ObTlZU1UwMFFTOWllV05hVHpJdk1pdFpaaXR5YWtrd01IZ3ZUZ295WkZKNU5ua3ZjMmc1T0V4R2RYbzJUbnBNYW5oTVptcHVlRkY1TVhZNWFGTk1iMnBWZDNwQlNXcEtjVzlhU2s1NVprWkZTSGxuUFFvdExTMHRMVVZPUkNCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2kwdExTMHRRa1ZIU1U0Z1EwVlNWRWxHU1VOQlZFVXRMUzB0TFFwTlNVbEdSbXBEUTBGMk5tZEJkMGxDUVdkSlVrRktSWEpEUlhKUVJFSnBibFV2WWxkTWFWZHVXREZ2ZDBSUldVcExiMXBKYUhaalRrRlJSVXhDVVVGM0NsUjZSVXhOUVd0SFFURlZSVUpvVFVOV1ZrMTRTMVJCYmtKblRsWkNRVzlVU1VWc2RXUkhWbmxpYlZZd1NVWk9iRmt6Vm5saFdGSTFTVVpLYkdNeVZtZ0tZMjFPYjBsRlpIbGlNMVozVFZKVmQwVjNXVVJXVVZGRVJYZDRTbFV4U2toSlJrcDJZak5SWjFkRVJYZElhR05PVFdwQmQwOVVRVEJOUkVGM1RVUkJkd3BYYUdOT1RXcFZkMDlVUlRGTlZGbDNUVVJCZDFkcVFYbE5VWE4zUTFGWlJGWlJVVWRGZDBwV1ZYcEZWMDFDVVVkQk1WVkZRMmhOVGxSSFZqQktNMDFuQ2xKWE5XcGpibXgzWkVSRlRFMUJhMGRCTVZWRlFYaE5RMVZxVFhkblowVnBUVUV3UjBOVGNVZFRTV0l6UkZGRlFrRlJWVUZCTkVsQ1JIZEJkMmRuUlVzS1FXOUpRa0ZSUXpkQmFGVnZlbEJoWjJ4T1RWQkZkWGxPVmxwTVJDdEpUSGh0WVZvMlVXOXBibGhUWVhGMFUzVTFlRlY1ZUhJME5YSXJXRmhKYnpsalVBcFNOVkZWVmxSV1dHcEtObTl2YW10YU9WbEpPRkZ4YkU5aWRsVTNkM2szWW1walEzZFlVRTVhVDA5bWRIb3libmRYWjNOaWRuTkRWVXBEVjBncmFtUjRDbk40VUc1SVMzcG9iU3N2WWpWRWRFWlZhMWRYY1dOR1ZIcHFWRWxWZFRZeGNuVXlVRE50UW5jMGNWWlZjVGRhZEVSd1pXeFJSRkp5U3psUE9GcDFkRzBLVGtoNk5tRTBkVkJXZVcxYUswUkJXRmhpY0hsaUwzVkNlR0V6VTJoc1p6bEdPR1p1UTJKMmVFc3ZaVWN6VFVoaFkxWXpWVkoxVUUxeVUxaENhVXg0WndwYU0xWnRjeTlGV1RrMlNtTTFiRkF2VDI5cE1sSTJXQzlGZUdweGJVRnNNMUExTVZRcll6aENOV1pYYldOQ1kxVnlNazlyTHpWdGVtczFNMk5WTm1OSENpOXJhVVpJWVVad2NtbFdNWFY0VUUxVloxQXhOMVpIYUdrNWMxWkJaMDFDUVVGSGFtZG5SVWxOU1VsQ1FrUkJUMEpuVGxaSVVUaENRV1k0UlVKQlRVTUtRVmxaZDBoUldVUldVakJzUWtKWmQwWkJXVWxMZDFsQ1FsRlZTRUYzU1VkRFEzTkhRVkZWUmtKM1RVSk5Ra2xIUVRGVlpFVjNSVUl2ZDFGSlRVRlpRZ3BCWmpoRFFWRkJkMGhSV1VSV1VqQlBRa0paUlVaQ1VYVnplR1V6VjBaaVRISnNRVXBSVDFsbWNqVXlURVpOVEVkTlFqaEhRVEZWWkVsM1VWbE5RbUZCQ2taSWJUQlhaVm8zZEhWWWEwRllUMEZEU1dwSlIyeHFNalphZEhWTlJFbEhRME56UjBGUlZVWkNkMFZDUWtOWmQwcEVRV2xDWjJkeVFtZEZSa0pSWTNjS1FXOVpWMkZJVWpCalJHOTJURE5uZUV4dGEzVmlSMVoxV1ROSmRXSXpTbTVNZWtGdVFtZE9Wa2hTT0VWSlJFRmxUVUo1WjBkeFFWbG9hRnB2WkVoU2R3cFBhVGgyWlVSRmRWbDVOWE5hVnpWcVkyazFkbU50WTNaTlEwbEhRVEZWWkVsQlVXSk5RbXQzUTBGWlIxbzBSVTFCVVVsQ1RVRXdSME41YzBkQlVWRkNDbWQwT0ZSQlVVVkNUVUV3UjBOVGNVZFRTV0l6UkZGRlFrTjNWVUZCTkVsRFFWRkRSbmxyTlVoUWNWQXphRlZUUm5aT1ZtNWxURXRaV1RZeE1WUlNObGNLVUZST2JHTnNVWFJuWVVSeGR5c3pORWxNT1daNlRHUjNRVXhrZFU4dldtVnNUamRyU1VvcmJUYzBkWGxCSzJWcGRGSlpPR3RqTmpBM1ZHdEROVE4zYkFwcGEyWnRXbGMwTDFKMlZGbzRUVFpWU3lzMVZYcG9TemhxUTJSTWRVMUhXVXcyUzNaNldFZFNVMmRwTTNsTVoycGxkMUYwUTFCclNWWjZOa1F5VVZGNkNrTnJZMmhsUVcxRFNqaE5jWGxLZFRWNmJIcDVXazFxUVhadWJrRlVORFYwVWtGNFpXdHljM1U1TkhOUk5HVm5aRkpEYm1KWFUwUjBXVGRyYUN0Q1NXMEtiRXBPV0c5Q01XeENUVVZMU1hFMFVVUlZUMWh2VW1kbVpuVkVaMmhxWlRGWGNrYzVUVXdyU0dKcGMzRXZlVVpQUjNkWVJEbFNhVmc0UmpaemR6WlhOQXBoZGtGMWRrUnplblZsTlV3emMzbzROVXNyUlVNMFdTOTNSbFpFVG5aYWJ6UlVXVmhoYnpaYU1HWXJiRkZMWXpCME9FUlJXWHByTVU5WVZuVTRjbkF5Q25sS1RVTTJZV3hNWWtKbVQwUkJURnAyV1VnM2JqZGtiekZCV214ek5FazVaREZRTkdwdWEwUnlVVzk0UWpOVmNWRTVhRlpzTTB4RlMxRTNNM2hHTVU4S2VVczFSMmhFUkZnNGIxWm1SMHRHTlhVclpHVmpTWE5JTkZsaFZIYzNiVkF6UjBaNFNsTnhkak1yTUd4VlJrcHZhVFZNWXpWa1lURTBPWEE1TUVsa2N3cG9RMFY0Y205TU1TczNiWEo1U1d0WVVHVkdUVFZVWjA4NWNqQnlkbHBoUWtaUGRsWXllakJuY0RNMVdqQXJURFJYVUd4aWRVVnFUaTlzZUZCR2FXNHJDa2hzVldweU9HZFNjMGt6Y1daS1QxRkdlUzg1Y2t0SlNsSXdXUzg0VDIxM2RDODRiMVJYWjNreGJXUmxTRzF0YW1zM2FqRnVXWE4yUXpsS1UxRTJXbllLVFd4a2JGUlVTMEl6ZW1oVWFGWXhLMWhYV1hBMmNtcGtOVXBYTVhwaVZsZEZhMHhPZUVVM1IwcFVhRVZWUnpOemVtZENWa2RRTjNCVFYxUlZWSE54V0FwdVRGSmlkMGhQYjNFM2FFaDNaejA5Q2kwdExTMHRSVTVFSUVORlVsUkpSa2xEUVZSRkxTMHRMUzBLTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVWlpSRU5EUWtWcFowRjNTVUpCWjBsUlVVRkdNMGxVWmxVMlZVczBOMjVoY1ZCSFVVdDBla0ZPUW1kcmNXaHJhVWM1ZHpCQ1FWRnpSa0ZFUVM4S1RWTlJkMGxuV1VSV1VWRkxSWGgwUldGWFpIQmtSMFp6U1VaT2NGb3lOV2hrU0ZaNVdsTkNWV051Vm5wa1EwSkVZbmswZUVaNlFWWkNaMDVXUWtGTlZBcEVhMUpVVmtOQ1UySXlPVEJKUlU1Q1NVWm5lazFDTkZoRVZFbDRUVVJGZVUxRVJUVk5WRkYzVFRGdldFUlVTVEJOUkd0NlRVUkZORTFVVVhkTk1XOTNDbFI2UlV4TlFXdEhRVEZWUlVKb1RVTldWazE0UzFSQmJrSm5UbFpDUVc5VVNVVnNkV1JIVm5saWJWWXdTVVpPYkZrelZubGhXRkkxU1VaS2JHTXlWbWdLWTIxT2IwbEZaSGxpTTFaM1RWSlZkMFYzV1VSV1VWRkVSWGQ0U2xVeFNraEpSa3AyWWpOUloxZEVSWGRuWjBscFRVRXdSME5UY1VkVFNXSXpSRkZGUWdwQlVWVkJRVFJKUTBSM1FYZG5aMGxMUVc5SlEwRlJRM1EyUTFKNk9VSlJNemcxZFdWTE1XTnZTRWxsS3pOTVptWlBTa05OWW1wNmJWWTJRalE1TTFoRENtOTJOekZoYlRjeVFVVTRiekk1Tlc5b2JYaEZhemRoZUZrdk1GVkZiWFV2U0RsTWNVMWFjMmhtZEVWNlVFeHdTVGxrTVRVek4wODBMM2hNZUVsYWNFd0tkMWx4UjJOWGJFdGFiVnB6YWpNME9HTk1LM1JMVTBsSE9DdFVRVFZ2UTNVMGEzVlFkRFZzSzJ4QlQyWXdNR1ZZWmtwc1NVa3hVRzlQU3pWUVEyMHJSQXBNZEVaS1ZqUjVRV1JNWW1GTU9VRTBhbGh6UkdORFJXSmtaa2wzVUZCeFVISjBNMkZaTm5aeVJtc3ZRMnBvUmt4bWN6aE1ObEFyTVdSNU56QnpiblJMQ2pSRmQxTktVWGgzYWxGTmNHOVBSbFJLVDNkVU1tVTBXblo0UTNwVGIzY3ZhV0ZPYUZWa05uTm9kMlZWT1VkT2VEZEROMmxpTVhWWloyVkhTbGhFVWpVS1lraGlkazgxUW1sbFpXSmljRXB2ZGtweldGRkZUMFZQTTNSclVXcG9ZamQwTDJWdk9UaG1iRUZuWlZscWVsbEpiR1ZtYVU0MVdVNU9ibGRsSzNjMWVRcHpVakppZGtGUU5WTlJXRmxuWkRCR2RFTnlWMUZsYlhOQldHRldRMmN2V1RNNVZ6bEZhRGd4VEhsbldHSk9TMWwzWVdkS1draGtkVko2WlRaNmNYaGFDbGh0YVdSbU0weFhhV05WUjFGVGF5dFhWRGRrU25aVmEzbFNSMjVYY1U1TlVVSTVSMjlhYlRGd2VuQlNZbTlaTjI1dU1YbHdlRWxHWlVadWRGQnNSalFLUmxGelJHbzBNMUZNZDFkNVVHNTBTMGhGZEhwQ1VrdzRlSFZ5WjFWQ1RqaFJOVTR3Y3pod01EVTBOR1pCVVdwUlRVNVNZbU5VWVRCQ04zSkNUVVJDWXdwVFRHVkRUelZwYldaWFEwdHZjVTF3WjNONU5uWlpUVVZITmt0RVFUQkhhREZuV0hoSE9Fc3lPRXRvT0docWRFZHhSV2R4YVU1NE1tMXVZUzlJTW5Gc0NsQlNiVkEyZW1wNldrNDNTVXQzTUV0TFVDOHpNaXRKVmxGMFVXa3dRMlJrTkZodUswZFBaSGRwU3pGUE5YUnRURTl6WW1SS01VWjFMemQ0YXpsVVRrUUtWSGRKUkVGUlFVSnZORWxDVW1wRFEwRlZTWGRFZDFsRVZsSXdWRUZSU0M5Q1FWVjNRWGRGUWk5NlFVOUNaMDVXU0ZFNFFrRm1PRVZDUVUxRFFWRlpkd3BUZDFsSlMzZFpRa0pSVlVoQlVVVkZVSHBCT1UxRWMwZERRM05IUVZGVlJrSjZRVU5vYVRsdlpFaFNkMDlwT0haWldFSjNZM2sxY0ZwSFZuVmtTRW94Q21NelVYVlpNamwwVEROS2RtSXpVbnBNTWxKNlpFaEtkbUl6VW1wWldHZDZURzVCTTFsNlFXWkNaMDVXU0ZOTlJVZEVRVmRuUWxSRmNEZEhhMlY1ZUhnS0szUjJhRk0xUWpFdk9GRldXVWxYU2tWRVFsVkNaMDVXU0ZOQlJWUlVRa3hOUVdkSFFtMWxRa1JCUlVOQlZFRXZRbWR6Y2tKblJVVkJXVXhtUlhkRlFncEJWRUYzVFVNMFIwTkRjMGRCVVZWR1FuZEpRa1pwU205a1NGSjNUMms0ZGxrelFucE1ia3AyWWpOUmRHVkVSWFZpUjFZd1l6SldkVmt6U2pWalNGRjFDbUl6U201TlJIZEhRVEZWWkVoM1VURk5SRTEzVFdGQmRtOURNa2RMTW1nd1pFaEJOa3g1T1dwamJYZDFZVmRTYkdKdVVubGtXRTR3VEcxT2RtSlRPVVVLVlRGU1UxUXdPVlZSTUVaWlRUQk9VMVJETldwamJYZDNTRkZaUkZaU01FOUNRbGxGUmtodE1GZGxXamQwZFZoclFWaFBRVU5KYWtsSGJHb3lObHAwZFFwTlFUQkhRMU54UjFOSllqTkVVVVZDUTNkVlFVRTBTVUpCVVVGTFkzZENjMnh0Tnk5RWJFeFJjblF5VFRVeGIwZHlVeXR2TkRRckwzbFJiMFJHVmtSRENqVlhlRU4xTWl0aU9VeFNVSGRyVTBsRFNGaE5ObmRsWWtaSFNuVmxUamR6U2pkdk5WaFFWMmx2VnpWWGJFaEJVVlUzUnpjMVN5OVJiM05OY2tGa1UxY0tPVTFWWjA1VVVEVXlSMFV5TkVoSFRuUk1hVEZ4YjBwR2JHTkVlWEZUVFc4MU9XRm9lVEpqU1RKeFFrUk1TMjlpYTNndlNqTjJWM0poVmpCVU9WWjFSd3BYUTB4TFZGWllhMk5IWkhSM2JHWkdVbXBzUW5vMGNGbG5NV2gwYldZMVdEWkVXVTg0UVRScWNYWXlTV3c1UkdwWVFUWlZVMkpYTVVaNldGTk1jamxQQ21obE9GazBTVmRUTm5kWk4ySkRhMnBEVjBSalVsRktUVVZvWnpjMlpuTlBNM1I0UlN0R2FWbHlkWEU1VWxWWGFHbEdNVzE1ZGpSUk5sY3JRM2xDUmtNS1JHWjJjRGRQVDBkQlRqWmtSVTlOTkN0eFVqbHpaR3B2VTFsTFJVSndjM0kyUjNSUVFWRjNOR1I1TnpVelpXTTFDaTB0TFMwdFJVNUVJRU5GVWxSSlJrbERRVlJGTFMwdExTMEsKICAgIHNlcnZlcjogaHR0cHM6Ly9hcGkuY2x1c3Rlci1xa3hkZy5xa3hkZy5zYW5kYm94ODc5Lm9wZW50bGMuY29tOjY0NDMKICBuYW1lOiBkZWZhdWx0LWNsdXN0ZXIKY29udGV4dHM6Ci0gY29udGV4dDoKICAgIGNsdXN0ZXI6IGRlZmF1bHQtY2x1c3RlcgogICAgbmFtZXNwYWNlOiBkZWZhdWx0CiAgICB1c2VyOiBkZWZhdWx0LWF1dGgKICBuYW1lOiBkZWZhdWx0LWNvbnRleHQKY3VycmVudC1jb250ZXh0OiBkZWZhdWx0LWNvbnRleHQKa2luZDogQ29uZmlnCnByZWZlcmVuY2VzOiB7fQp1c2VyczoKLSBuYW1lOiBkZWZhdWx0LWF1dGgKICB1c2VyOgogICAgdG9rZW46IGV5SmhiR2NpT2lKU1V6STFOaUlzSW10cFpDSTZJakpZUWpsWWNtSndWMHMyTkRocFlXcFdUbloyVG1ZMVNGTnhOWHA0V25CV2VVa3laM1JQVnpkbVluTWlmUS5leUpwYzNNaU9pSnJkV0psY201bGRHVnpMM05sY25acFkyVmhZMk52ZFc1MElpd2lhM1ZpWlhKdVpYUmxjeTVwYnk5elpYSjJhV05sWVdOamIzVnVkQzl1WVcxbGMzQmhZMlVpT2lKc1lXSXlJaXdpYTNWaVpYSnVaWFJsY3k1cGJ5OXpaWEoyYVdObFlXTmpiM1Z1ZEM5elpXTnlaWFF1Ym1GdFpTSTZJbXhoWWpJdFltOXZkSE4wY21Gd0xYTmhMWFJ2YTJWdUxYWm5lbWh3SWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXpaWEoyYVdObExXRmpZMjkxYm5RdWJtRnRaU0k2SW14aFlqSXRZbTl2ZEhOMGNtRndMWE5oSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXpaWEoyYVdObExXRmpZMjkxYm5RdWRXbGtJam9pWmpoaU5tUTVOVFF0WVdKa055MDBNakV4TFRnMU5EZ3RZV0k1TXpZMlpqUTRPV0kxSWl3aWMzVmlJam9pYzNsemRHVnRPbk5sY25acFkyVmhZMk52ZFc1ME9teGhZakk2YkdGaU1pMWliMjkwYzNSeVlYQXRjMkVpZlEub2NDellqOHN3d0FjM2RjWC1JS1VHZEdEMmp5YVdPWlVyRGhRUHBrT1luajZPMVFlX2tMTF9oRlc2M0ZZMVR6d1RmSTlMMF9yMEJRY3dCb3luczFLdEdJWGhDQUNYWndTTUtWTDcxSU9FTVlNVUhrWWtpYnFxR0sxWkFlQkFkRTJmZFMwSEozcVg0OG0zTElyU0d1SGZzY1dtNWhaQzh0Ul91MC03UlQ2VkNWMVViMEkySWFWLUhkR1VLWEp5MFlRVFdRaDhiR3VLdDFnUmtMT0cwNHdvc0dNSUVFc1NXMXN0OURnaFlYazA1SmlodzdoZmhxTm5Jay1CT2VOM0daSTJtSXMxdVlmT0lsRkNEWjNFTzJTWVdxN0lJa3FnT0Z4bFh4UWx4dklfYmpvSDl2R3ptcDJMajJockR6RDdYOC1MUS1ieGpzWUdDa05zSFpJdHdic21mZ202NDVrU216LXJOUnQ4UXZFX1Q2ZXBha1ZqcGZsSUpXVUpiR3RjNG1ESThZMlRKX052Y1J6OWZPMUhsYmxUNC1YMTJZMnN2ejRHcks1WDhYNzZ0UFkxbmpvWXJGdGdxbHI2dkx0UXdUbTJXbDU4Zm5Zb2pHVW1MdGlOVlJWT1cwc0tya0lkdjJnZjNNLTZEU204N3R2U21KSUpVZGVXOHB5aVZidmNSUzlCVDdPeERPbzhYLWR3X0xnZU9wX1pWRU1RWVF5NUttblRNdEkyUkRQT2FGeVNnR0gtUkhSTlBmMFVtdXhLVHk0eEhVSk44UmEyR2hOM1pVVkpuRHNOLXY2dnA5Q0laYmwwRGJseFhsMUtIWGwyc0tUWDRQTVc5ek9YWW9PcXhNVmNIOE1HWXNXUFlxVWx4cENiZEtGYTBMTG1vUk4xalBjME91dXAzOWh0YmMK"

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: klusterlet
rules:
- apiGroups: [""]
  resources: ["secrets", "configmaps", "serviceaccounts"]
  verbs: ["create", "get", "list", "update", "watch", "patch", "delete"]
- apiGroups: ["authorization.k8s.io"]
  resources: ["subjectaccessreviews"]
  verbs: ["create"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["create", "get", "list", "watch","delete"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["", "events.k8s.io"]
  resources: ["events"]
  verbs: ["create", "patch", "update"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["create", "get", "list", "update", "watch", "patch", "delete"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterrolebindings", "rolebindings"]
  verbs: ["create", "get", "list", "update", "watch", "patch", "delete"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "roles"]
  verbs: ["create", "get", "list", "update", "watch", "patch", "delete", "escalate", "bind"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["create", "get", "list", "update", "watch", "patch", "delete"]
- apiGroups: ["operator.open-cluster-management.io"]
  resources: ["klusterlets"]
  verbs: ["get", "list", "watch", "update", "patch", "delete"]
- apiGroups: ["operator.open-cluster-management.io"]
  resources: ["klusterlets/status"]
  verbs: ["update", "patch"]
- apiGroups: ["work.open-cluster-management.io"]
  resources: ["appliedmanifestworks"]
  verbs: ["list", "update", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: open-cluster-management:klusterlet-admin-aggregate-clusterrole
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
rules:
- apiGroups: ["operator.open-cluster-management.io"]
  resources: ["klusterlets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: klusterlet
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: klusterlet
subjects:
- kind: ServiceAccount
  name: klusterlet
  namespace: "open-cluster-management-agent"

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: klusterlet
  namespace: "open-cluster-management-agent"
  labels:
    app: klusterlet
spec:
  replicas: 1
  selector:
    matchLabels:
      app: klusterlet
  template:
    metadata:
      annotations:
        target.workload.openshift.io/management: '{"effect": "PreferredDuringScheduling"}'
      labels:
        app: klusterlet
    spec:
      serviceAccountName: klusterlet
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/infra
          operator: Exists
      containers:
      - name: klusterlet
        image: registry.redhat.io/rhacm2/registration-rhel8-operator@sha256:568d3b5dc4da1dd35c68d1405c274933d6129462b5873e929e25a444c50f1d6b
        imagePullPolicy: IfNotPresent
        args:
          - "/registration-operator"
          - "klusterlet"
        livenessProbe:
          httpGet:
            path: /healthz
            scheme: HTTPS
            port: 8443
          initialDelaySeconds: 2
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /healthz
            scheme: HTTPS
            port: 8443
          initialDelaySeconds: 2

---
apiVersion: operator.open-cluster-management.io/v1
kind: Klusterlet
metadata:
  name: klusterlet
spec:
  registrationImagePullSpec: "registry.redhat.io/rhacm2/registration-rhel8@sha256:574b41e19bf26043f985fcfac8e8cd9384f1b37aba4d4eb3be3901ae6a427081"
  workImagePullSpec: "registry.redhat.io/rhacm2/work-rhel8@sha256:b5c1519fda361b17f90ce895de2587d0b95692660fb79988ca2f21f71267ebe1"
  clusterName: "lab2"
  namespace: "open-cluster-management-agent"
  nodePlacement:
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/infra
      operator: Exists
" | base64 -d | kubectl apply -f - || echo "VGhlIGNsdXN0ZXIgY2Fubm90IGJlIGltcG9ydGVkIGJlY2F1c2UgaXRzIEtsdXN0ZXJsZXQgQ1JEIGFscmVhZHkgZXhpc3RzLgpFaXRoZXIgdGhlIGNsdXN0ZXIgd2FzIGFscmVhZHkgaW1wb3J0ZWQsIG9yIGl0IHdhcyBub3QgZGV0YWNoZWQgY29tcGxldGVseSBkdXJpbmcgYSBwcmV2aW91cyBkZXRhY2ggcHJvY2Vzcy4KRGV0YWNoIHRoZSBleGlzdGluZyBjbHVzdGVyIGJlZm9yZSB0cnlpbmcgdGhlIGltcG9ydCBhZ2Fpbi4=" | base64 -d
